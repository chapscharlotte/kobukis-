

// GOING BACK TO INITIAL POSITION 
//
// Framework for creating applications that control the Kobuki robot

#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <time.h>

#include "app_error.h"
#include "app_timer.h"
#include "nrf.h"
#include "nrf_delay.h"
#include "nrf_gpio.h"
#include "nrf_log.h"
#include "nrf_log_ctrl.h"
#include "nrf_log_default_backends.h"
#include "nrf_pwr_mgmt.h"
#include "nrf_drv_spi.h"

#include "buckler.h"
#include "display.h"
#include "kobukiActuator.h"
#include "kobukiSensorPoll.h"
#include "kobukiSensorTypes.h"
#include "kobukiUtilities.h"
#include "mpu9250.h"

// I2C manager
NRF_TWI_MNGR_DEF(twi_mngr_instance, 5, 0);

typedef enum {
  OFF,
  OFF_BUTTON,
  DRIVING,
  TURNING,
  OBSTACLES_BACK_UP,
  AVOIDING_OBSTACLES,
} robot_state_rand;

// states[1] = OFF; 
// states[2] = DRIVING; 

//  BASIC CALCUL FUNCTIONS and constants

float Pi = M_PI;

static int sgn(float number) {
  if (number > 0) {
    return 1;
  } else {
    return -1;
  }
}

// Generates and prints 'count' random 
// numbers in range [lower, upper]. 
static float printRandoms(int lower, int upper, int count) { 
    int i;
    float num; 
    for (i = 0; i < count; i++) { 
        num = (rand() % 
          (upper - lower + 1)) + lower; 
    } 
    return num; 
} 

static robot_state_rand stateRandoms(int i) { 
  robot_state_rand st;
  if (i==1) { 
    st = OFF;
    return st;
  } else {
    st = DRIVING; 
    return st;
} 
}
// static time_rand,distance_rand,angle_rand parameterRandoms(state_rand) { 
//     int i = floor(printRandoms(1,6,1));
//     return states[i]; 
// } 


// MEASURES ON KOBUKI FUNCTIONS (DISTANCE AND ANGLE)

static float measure_distance (uint16_t current_encoder, uint16_t previous_encoder) {
  const float CONVERSION = 0.00008529;
  float result;
  if (current_encoder < previous_encoder) {
    result = (0xFFFF - previous_encoder + current_encoder) * CONVERSION;
  } else {
    result = (current_encoder - previous_encoder) * CONVERSION;
  }

  if( result > 5){
    return 0;
  }
  return result;
}

static float measure_negative_distance (uint16_t current_encoder, uint16_t previous_encoder) {
  const float CONVERSION = 0.00008529;
  float result;
  if (previous_encoder < current_encoder) {
    result = (0xFFFF - current_encoder + previous_encoder) * CONVERSION;
  } else {
    result = (previous_encoder - current_encoder) * CONVERSION;
  }

  if( result > 5){
    return 0;
  }
  return result;
}

// Timers 
void virtual_timer_init (void) {
  NRF_TIMER4->BITMODE = 3;
  NRF_TIMER4->PRESCALER = 4;
  NRF_TIMER4->TASKS_START = 1 ;
  NRF_TIMER4->TASKS_CLEAR = 1; 
}

// Read the current value of the timer counter
uint32_t read_timer(void) {
  NRF_TIMER4->TASKS_CAPTURE[1] = 1;
  return NRF_TIMER4->CC[1];
  // Should return the value of the internal counter for TIMER4
}



int main(void) {
  ret_code_t error_code = NRF_SUCCESS;

  // initialize RTT library
  error_code = NRF_LOG_INIT(NULL);
  APP_ERROR_CHECK(error_code);
  NRF_LOG_DEFAULT_BACKENDS_INIT();
  printf("Log initialized!\n");

  // initialize LEDs
  nrf_gpio_pin_dir_set(23, NRF_GPIO_PIN_DIR_OUTPUT);
  nrf_gpio_pin_dir_set(24, NRF_GPIO_PIN_DIR_OUTPUT);
  nrf_gpio_pin_dir_set(25, NRF_GPIO_PIN_DIR_OUTPUT);

  // initialize display
  nrf_drv_spi_t spi_instance = NRF_DRV_SPI_INSTANCE(1);
  nrf_drv_spi_config_t spi_config = {
    .sck_pin = BUCKLER_LCD_SCLK,
    .mosi_pin = BUCKLER_LCD_MOSI,
    .miso_pin = BUCKLER_LCD_MISO,
    .ss_pin = BUCKLER_LCD_CS,
    .irq_priority = NRFX_SPI_DEFAULT_CONFIG_IRQ_PRIORITY,
    .orc = 0,
    .frequency = NRF_DRV_SPI_FREQ_4M,
    .mode = NRF_DRV_SPI_MODE_2,
    .bit_order = NRF_DRV_SPI_BIT_ORDER_MSB_FIRST
  };
  error_code = nrf_drv_spi_init(&spi_instance, &spi_config, NULL, NULL);
  APP_ERROR_CHECK(error_code);
  display_init(&spi_instance);
  display_write("HI", DISPLAY_LINE_0);
  printf("Display initialized!\n");

  // initialize i2c master (two wire interface)
  nrf_drv_twi_config_t i2c_config = NRF_DRV_TWI_DEFAULT_CONFIG;
  i2c_config.scl = BUCKLER_SENSORS_SCL;
  i2c_config.sda = BUCKLER_SENSORS_SDA;
  i2c_config.frequency = NRF_TWIM_FREQ_100K;
  error_code = nrf_twi_mngr_init(&twi_mngr_instance, &i2c_config);
  APP_ERROR_CHECK(error_code);
  mpu9250_init(&twi_mngr_instance);
  printf("IMU initialized!\n");

  // initialize Kobuki
  kobukiInit();
  printf("Kobuki initialized!\n");
  
  // INITIAL POSITION 
  float initial_x = printRandoms(-3, 13, 1);
  float initial_y = printRandoms(-3, 3, 1);
  float initial_angle = Pi/2;

  // MAIN COMPUTER DATA CURRENT STATE 
  bool master = false;
  float current_angle = printRandoms(-Pi, Pi, 1);
  float current_x = printRandoms(-1, 1, 1);
  float current_y = printRandoms(-1, 1, 1);
 
 // VARIABLES DEFINITION 
  
  float deviation = 0;
  float distance = 0;
  float angle = 0;
  
  // CALCULUS
  float theta = atan((current_y-initial_y)/(current_x-initial_x));
  float start_distance = sqrt((current_y-initial_y)*(current_y-initial_y)+(current_x-initial_x)*(current_x-initial_x));
  int s = sgn(current_angle-theta);
  float deviation_1 = s*(Pi+theta)-current_angle;
  float deviation_2 = initial_angle-(Pi+theta);
  
  
  // INITIAL CONDITITONS
  robot_state_rand state_rand = OFF;
  // robot_state_rand state_back = OFF;
  display_write("OFF", DISPLAY_LINE_0);
  KobukiSensors_t sensors = {0};
  uint16_t prev_encoder = 0;
  uint16_t next_encoder = 0;
  bool left = false;

  // RANDOM MOTION 
  float time_rand = printRandoms(0, 3000000, 1);
  float distance_rand = 0;
  float angle_rand = 0;

  // TIMER INITIALISATION 
 
  virtual_timer_init();
  uint32_t previous_time = read_timer();
  uint32_t next_time = 0;

  display_write("END", DISPLAY_LINE_0);

  // loop forever, running state machine
  while (1) {
    // read sensors from robot
    kobukiSensorPoll(&sensors);
    nrf_delay_ms(100);

    switch(state_rand) {

      case OFF: {
        next_time = read_timer();
        char buf[16];
        snprintf(buf,16,"%ld", next_time-previous_time);
        display_write(buf, DISPLAY_LINE_1);
        if (is_button_pressed(&sensors)) {
          state_rand = OFF_BUTTON;
          display_write("", DISPLAY_LINE_1);
        } else if (next_time-previous_time>=time_rand) {
          next_time = 0;
          int i = printRandoms(1,3,1);
          printf("%u\n", i);
          if (i==1) { 
            state_rand = OFF;
            previous_time = read_timer();
            time_rand = printRandoms(1000000,3000000,1);
          } else if (i==2) {
              state_rand= DRIVING; 
              distance_rand = 0.1*printRandoms(1,15,1);
              prev_encoder = sensors.rightWheelEncoder;
          } else  {
            state_rand = TURNING;
            angle_rand = printRandoms(0,180,1);
            mpu9250_start_gyro_integration();
            s = sgn(angle_rand);
          }
             
        } else {
          // perform state-specific actions here
          display_write("OFF", DISPLAY_LINE_0);
          kobukiDriveDirect(0,0);
          state_rand = OFF;
        }
        break;
      }

      case OFF_BUTTON: {
        if (is_button_pressed(&sensors)) {
          state_rand = OFF;
          previous_time = read_timer();
          time_rand = printRandoms(1000000,3000000,1); 
        } else {
          // perform state-specific actions here
          display_write("OFF_BUTTON", DISPLAY_LINE_0);
          kobukiDriveDirect(0,0);
          state_rand = OFF_BUTTON;
        }

        break;
      }

      case DRIVING: {
        // transition logic
        next_encoder = sensors.rightWheelEncoder;
        distance = measure_distance(next_encoder, prev_encoder);
        char buf[16];
        snprintf(buf,16,"%f", distance);
        display_write(buf, DISPLAY_LINE_1);
        if (is_button_pressed(&sensors)) {
          state_rand = OFF_BUTTON;
          display_write("", DISPLAY_LINE_1);
        } else if (sensors.bumps_wheelDrops.bumpLeft || sensors.bumps_wheelDrops.bumpRight || sensors.bumps_wheelDrops.bumpCenter) {
          state_rand = OBSTACLES_BACK_UP;
          display_write("OBSTACLE", DISPLAY_LINE_0);
          if (!sensors.bumps_wheelDrops.bumpCenter){
            left = sensors.bumps_wheelDrops.bumpLeft && !sensors.bumps_wheelDrops.bumpRight;
          }
          prev_encoder = sensors.rightWheelEncoder;
        }  else if (distance >= distance_rand) {
            distance = 0;
            int i = printRandoms(1,3,1);
            printf("%u\n", i);
            if (i==1) { 
              state_rand = OFF;
              previous_time = read_timer();
              time_rand = printRandoms(1000000,3000000,1);

          } else if (i==2) {
              state_rand= DRIVING; 
              distance_rand = 0.1*printRandoms(1,15,1);
              prev_encoder = sensors.rightWheelEncoder;
          } else if (i==3)  {
            state_rand = TURNING;
            angle_rand = printRandoms(-180,180,1);
            mpu9250_start_gyro_integration();
            s = sgn(angle_rand);
          }
          
        } else {
          // perform state-specific actions here
          int j = printRandoms(1,2,1);
          display_write("DRIVING", DISPLAY_LINE_0);
          kobukiDriveDirect(100,100);
          state_rand= DRIVING;
        }
          break;
      }


      case TURNING: {
      
        angle = mpu9250_read_gyro_integration().z_axis;
        char buf[16];
        snprintf(buf,16,"%f", angle);
        display_write(buf, DISPLAY_LINE_1);
        if (is_button_pressed(&sensors)) {
          state_rand = OFF_BUTTON;
          display_write("", DISPLAY_LINE_1);
        } else if (sensors.bumps_wheelDrops.bumpLeft || sensors.bumps_wheelDrops.bumpRight || sensors.bumps_wheelDrops.bumpCenter) {
          state_rand = OBSTACLES_BACK_UP;
          display_write("OBSTACLE", DISPLAY_LINE_0);
          if (!sensors.bumps_wheelDrops.bumpCenter){
            left = sensors.bumps_wheelDrops.bumpLeft && !sensors.bumps_wheelDrops.bumpRight;
          }
          prev_encoder = sensors.rightWheelEncoder;
        } else if (abs(angle) >= angle_rand) {
              mpu9250_stop_gyro_integration();
              angle = 0;
              int i = printRandoms(1,3,1);
              printf("%u\n", i);
              if (i==1) { 
                state_rand = OFF;
                previous_time = read_timer();
                time_rand = printRandoms(1000000,3000000,1);
            } else if (i==2) {
                state_rand= DRIVING; 
                distance_rand = 0.1*printRandoms(1,15,1);
                prev_encoder = sensors.rightWheelEncoder;
            } else  {
              state_rand = TURNING;
              angle_rand = printRandoms(-180,180,1);
              mpu9250_start_gyro_integration();
              s = -sgn(angle_rand);
            }
        } else {
          display_write("TURNING", DISPLAY_LINE_0);
          kobukiDriveDirect(s*50,-s*50);
          state_rand = TURNING;
        }
        break;
      }  

      case OBSTACLES_BACK_UP: {
        next_encoder = sensors.rightWheelEncoder;
        distance = measure_negative_distance(next_encoder, prev_encoder);
        char buf[16];
        snprintf(buf,16,"%f", distance);
        display_write(buf, DISPLAY_LINE_1);
        if (is_button_pressed(&sensors)) {
          state_rand = OFF;
          display_write("", DISPLAY_LINE_1);
        } else if (distance >= 0.1) {
          state_rand = AVOIDING_OBSTACLES;
          angle = 0;
          mpu9250_start_gyro_integration();
        } else {
          // perform state-specific actions here
          display_write("OBSTACLE", DISPLAY_LINE_0);
          kobukiDriveDirect(-100,-100);
          state_rand = OBSTACLES_BACK_UP;
        }
        break;
      }

       case AVOIDING_OBSTACLES: {
        angle = mpu9250_read_gyro_integration().z_axis;
        char buf[16];
        snprintf(buf,16,"%f", angle);
        display_write(buf, DISPLAY_LINE_1);
        if (is_button_pressed(&sensors)) {
          state_rand = OFF;
          display_write("", DISPLAY_LINE_1);
        } else if (abs(angle) >= 45) {
          state_rand = DRIVING;
          mpu9250_stop_gyro_integration();
          distance_rand = 0.1*printRandoms(1,15,1);
          prev_encoder = sensors.rightWheelEncoder;
        } else {
          display_write("AVOIDING_OBSTACLES", DISPLAY_LINE_0);
          if (left==true) {
            kobukiDriveDirect(50,-50);
          } else {
            kobukiDriveDirect(-50,50);   
            state_rand = AVOIDING_OBSTACLES;
          }
        }  
        break;
      } 
    }
  }
}
