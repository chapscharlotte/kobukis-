/ Robot Template app
//
// Framework for creating applications that control the Kobuki robot

#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>

#include "app_error.h"
#include "app_timer.h"
#include "nrf.h"
#include "nrf_delay.h"
#include "nrf_gpio.h"
#include "nrf_log.h"
#include "nrf_log_ctrl.h"
#include "nrf_log_default_backends.h"
#include "nrf_pwr_mgmt.h"
#include "nrf_drv_spi.h"

#include "buckler.h"
#include "display.h"
#include "kobukiActuator.h"
#include "kobukiSensorPoll.h"
#include "kobukiSensorTypes.h"
#include "kobukiUtilities.h"
#include "mpu9250.h"

// I2C manager
NRF_TWI_MNGR_DEF(twi_mngr_instance, 5, 0);

typedef enum {
  OFF,
  DRIVING,
  TURNING,
  OBSTACLE_BACK_UP,
  OBSTACLE_TURN,
} robot_state_t;

float distance = 0;

static float measure_distance (uint16_t current_encoder, uint16_t previous_encoder) {
  const float CONVERSION = 0.00008529;
  float result;
  if (current_encoder < previous_encoder) {
    result = (0xFFFF - previous_encoder + current_encoder) * CONVERSION;
  } else {
    result = (current_encoder - previous_encoder) * CONVERSION;
  }

  if( result > 5){
    return 0;
  }
  return result;
}

static float measure_negative_distance (uint16_t current_encoder, uint16_t previous_encoder) {
  const float CONVERSION = 0.00008529;
  float result;
  if (previous_encoder < current_encoder) {
    result = (0xFFFF - current_encoder + previous_encoder) * CONVERSION;
  } else {
    result = (previous_encoder - current_encoder) * CONVERSION;
  }

  if( result > 5){
    return 0;
  }
  return result;
}

int main(void) {
  ret_code_t error_code = NRF_SUCCESS;

  // initialize RTT library
  error_code = NRF_LOG_INIT(NULL);
  APP_ERROR_CHECK(error_code);
  NRF_LOG_DEFAULT_BACKENDS_INIT();
  printf("Log initialized!\n");

  // initialize LEDs
  nrf_gpio_pin_dir_set(23, NRF_GPIO_PIN_DIR_OUTPUT);
  nrf_gpio_pin_dir_set(24, NRF_GPIO_PIN_DIR_OUTPUT);
  nrf_gpio_pin_dir_set(25, NRF_GPIO_PIN_DIR_OUTPUT);

  // initialize display
  nrf_drv_spi_t spi_instance = NRF_DRV_SPI_INSTANCE(1);
  nrf_drv_spi_config_t spi_config = {
    .sck_pin = BUCKLER_LCD_SCLK,
    .mosi_pin = BUCKLER_LCD_MOSI,
    .miso_pin = BUCKLER_LCD_MISO,
    .ss_pin = BUCKLER_LCD_CS,
    .irq_priority = NRFX_SPI_DEFAULT_CONFIG_IRQ_PRIORITY,
    .orc = 0,
    .frequency = NRF_DRV_SPI_FREQ_4M,
    .mode = NRF_DRV_SPI_MODE_2,
    .bit_order = NRF_DRV_SPI_BIT_ORDER_MSB_FIRST
  };
  error_code = nrf_drv_spi_init(&spi_instance, &spi_config, NULL, NULL);
  APP_ERROR_CHECK(error_code);
  display_init(&spi_instance);
  display_write("Hello, Human!", DISPLAY_LINE_0);
  printf("Display initialized!\n");

  // initialize i2c master (two wire interface)
  nrf_drv_twi_config_t i2c_config = NRF_DRV_TWI_DEFAULT_CONFIG;
  i2c_config.scl = BUCKLER_SENSORS_SCL;
  i2c_config.sda = BUCKLER_SENSORS_SDA;
  i2c_config.frequency = NRF_TWIM_FREQ_100K;
  error_code = nrf_twi_mngr_init(&twi_mngr_instance, &i2c_config);
  APP_ERROR_CHECK(error_code);
  mpu9250_init(&twi_mngr_instance);
  printf("IMU initialized!\n");

  // initialize Kobuki
  kobukiInit();
  printf("Kobuki initialized!\n");
  
  // INITIAL POSITION 
  float initial_x = rand(-3,3);
  float initial_y = rand(-3,3);
  float initial_angle = pi/2;

  // MAIN COMPUTER DATA CURRENT STATE 
  float current_angle = rand(-pi,pi);
  float current_x = rand(-3,3);
  float current_y = rand(-3,3);
  
  float angle = 0;
  bool left = false;
  
  // CALCULUS
  float theta = atan((current_y-initial_y)/(current_x-initial_x);
  float distance = sqrt((current_y-initial_y)^2+(current_x-initial_x)^2);
  deviation_1 = pi+theta-current_angle;
  deviation_2 = initial_angle-(pi+theta);
  
  
  // INITIAL CONDITITONS
  robot_state_t state = OFF;
  KobukiSensors_t sensors = {0};
  uint16_t prev_encoder = 0;
  
  
  // loop forever, running state machine
  while (1) {
    // read sensors from robot
    kobukiSensorPoll(&sensors);

    // delay before continuing
    // Note: removing this delay will make responses quicker, but will result
    //  in printf's in this loop breaking JTAG
    nrf_delay_ms(100);

    // HANDLE STATES
    switch(state) {
      case OFF: {
        // transition logic
        if (is_button_pressed(&sensors)) {
          state = DRIVING;
          prev_encoder = sensors.rightWheelEncoder;
        } else {
          // perform state-specific actions here
          display_write("OFF", DISPLAY_LINE_0);
          kobukiDriveDirect(0,0);
          state = OFF;
        }
        break; // each case needs to end with break!
      }

      case DRIVING: {
        // transition logic
        uint16_t next_encoder = sensors.rightWheelEncoder;
        distance = measure_distance(next_encoder, prev_encoder);
        char buf[16];
        snprintf(buf,16,"%f", distance);
        display_write(buf, DISPLAY_LINE_1);
        if (is_button_pressed(&sensors)) {
          state = OFF;
          display_write("", DISPLAY_LINE_1);
        } else if (sensors.bumps_wheelDrops.bumpLeft || sensors.bumps_wheelDrops.bumpRight || sensors.bumps_wheelDrops.bumpCenter) {
          state = OBSTACLE_BACK_UP;
          display_write("OBSTACLE", DISPLAY_LINE_0);
          if (!sensors.bumps_wheelDrops.bumpCenter){
            left = sensors.bumps_wheelDrops.bumpLeft && !sensors.bumps_wheelDrops.bumpRight;
          }
          prev_encoder = sensors.rightWheelEncoder;
        } else if (distance >= 0.5) {
          state = TURNING;
          angle = 0;
          mpu9250_start_gyro_integration();
        } else {
          // perform state-specific actions here
          display_write("DRIVING", DISPLAY_LINE_0);
          kobukiDriveDirect(100,100);
          state = DRIVING;
        }
        break; // each case needs to end with break!
      }
      case TURNING: {

        angle = mpu9250_read_gyro_integration().z_axis;
        char buf[16];
        snprintf(buf,16,"%f", angle);
        display_write(buf, DISPLAY_LINE_1);
        if (is_button_pressed(&sensors)) {
          state = OFF;
          display_write("", DISPLAY_LINE_1);
        } else if (sensors.bumps_wheelDrops.bumpLeft || sensors.bumps_wheelDrops.bumpRight || sensors.bumps_wheelDrops.bumpCenter) {
          state = OBSTACLE_BACK_UP;
          display_write("OBSTACLE", DISPLAY_LINE_0);
          if (!sensors.bumps_wheelDrops.bumpCenter){
            left = sensors.bumps_wheelDrops.bumpLeft && !sensors.bumps_wheelDrops.bumpRight;
          }
          prev_encoder = sensors.rightWheelEncoder;
        } else if (abs(angle) >= 90) {
          state = DRIVING;
          mpu9250_stop_gyro_integration();
          prev_encoder = sensors.rightWheelEncoder;
        } else {
          display_write("TURNING", DISPLAY_LINE_0);
          kobukiDriveDirect(-50,50);
          state = TURNING;
        }
        break;
      }

      case OBSTACLE_BACK_UP: {

        uint16_t next_encoder = sensors.rightWheelEncoder;
        distance = measure_negative_distance(next_encoder, prev_encoder);
        char buf[16];
        snprintf(buf,16,"%f", distance);
        display_write(buf, DISPLAY_LINE_1);
        if (is_button_pressed(&sensors)) {
          state = OFF;
          display_write("", DISPLAY_LINE_1);
        } else if (distance >= 0.1) {
          state = OBSTACLE_TURN;
          angle = 0;
          mpu9250_start_gyro_integration();
        } else {
          // perform state-specific actions here
          display_write("OBSTACLE", DISPLAY_LINE_0);
          kobukiDriveDirect(-100,-100);
          state = OBSTACLE_BACK_UP;
        }
        break;
      }

      case OBSTACLE_TURN: {
        angle = mpu9250_read_gyro_integration().z_axis;
        char buf[16];
        snprintf(buf,16,"%f", angle);
        display_write(buf, DISPLAY_LINE_1);
        if (is_button_pressed(&sensors)) {
          state = OFF;
          display_write("", DISPLAY_LINE_1);
        } else if (abs(angle) >= 45) {
          state = DRIVING;
          mpu9250_stop_gyro_integration();
          prev_encoder = sensors.rightWheelEncoder;
        } else {
          display_write("TURNING", DISPLAY_LINE_0);
          if(left){
            kobukiDriveDirect(50,-50);
          } else {
            kobukiDriveDirect(-50,50);
          }    
          state = OBSTACLE_TURN;
        }
        break;
      }
      // add other cases here

    }
  }
}
